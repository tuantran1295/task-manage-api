<!DOCTYPE html>
<html>
<head>
    <title>All Tasks</title>
    <style>
        body { font-family: Arial; margin: 2em; }
        table { border-collapse: collapse; min-width: 1100px;}
        th, td { padding: 8px 12px; border: 1px solid #ccc;}
        th { background: #efefef;}
        select, button { padding:4px 8px;}
        nav a { margin:0 1em 0 0; }
    </style>
</head>
<body>
<div>
    <span id="user-info"></span>
    <nav style="float:right;">
        <a href="/tasks">All Tasks</a>
        <a href="/tasks-create">Create Task</a>
        <a href="/employee-summary">Employee Summary</a>
        <a href="/login" onclick="logout();return false;">Logout</a>
    </nav>
</div>
<h2>All Tasks</h2>
<form id="filter-form">
    Assignee:
    <select name="assigneeId" id="assigneeIdFilter"></select>
    Status:
    <select name="status" id="statusFilter">
        <option value="">All</option>
        <option value="PENDING">Pending</option>
        <option value="IN_PROGRESS">In Progress</option>
        <option value="COMPLETED">Completed</option>
    </select>
    Sort by:
    <select name="sortBy" id="sortByFilter">
        <option value="createdAt">Created At</option>
        <option value="dueDate">Due Date</option>
        <option value="status">Status</option>
    </select>
    <select name="order" id="orderFilter">
        <option value="desc">Descending</option>
        <option value="asc">Ascending</option>
    </select>
    <button type="button" id="resetFilters">Reset</button>
</form>
<table id="tasks-table">
    <thead><tr>
        <th>Title</th>
        <th>Description</th>
        <th>Status</th>
        <th>Due Date</th>
        <th>Created At</th>
        <th>Assignee</th>
        <th>Update Status</th>
    </tr></thead>
    <tbody></tbody>
</table>
<script>
    function logout() { localStorage.removeItem('token'); window.location = '/login'; }

    async function getTokenUser() {
        const token = localStorage.getItem('token');
        if (!token) return window.location = '/login';
        const res = await fetch('/api/users/me', { headers: { 'Authorization': 'Bearer ' + token } });
        if (!res.ok) return window.location = '/login';
        return res.json();
    }
    async function fetchEmployees() {
        const token = localStorage.getItem('token');
        const res = await fetch('/api/employees/summary', { headers: { 'Authorization': 'Bearer ' + token }});
        if (!res.ok) return [];
        return res.json();
    }
    async function fetchTasks(params) {
        const token = localStorage.getItem('token');
        const qs = new URLSearchParams(params).toString();
        const res = await fetch('/api/tasks?' + qs, {
            headers: { 'Authorization': 'Bearer ' + token }
        });
        return res.json();
    }
    function updateUrlParams(params) {
        const qs = new URLSearchParams(params).toString();
        window.history.replaceState(null, '', '/tasks' + (qs ? `?${qs}` : ''));
    }
    async function load() {
        // Parse filters from URL
        let urlParams = new URLSearchParams(window.location.search);
        let params = {
            assigneeId: urlParams.get('assigneeId') || "",
            status: urlParams.get('status') || "",
            sortBy: urlParams.get('sortBy') || "createdAt",
            order: urlParams.get('order') || "desc"
        };

        // Get user and employees
        const user = await getTokenUser();
        document.getElementById('user-info').textContent = user.name + " (" + user.email + ") - Employer";
        const employees = await fetchEmployees();

        // Fill assignee filter
        const assSel = document.getElementById('assigneeIdFilter');
        assSel.innerHTML = `<option value="">All</option>`;
        employees.forEach(emp => {
            assSel.innerHTML += `<option value="${emp.id}" ${params.assigneeId == emp.id ? "selected":""}>${emp.name}</option>`;
        });

        // Set other filters
        document.getElementById('statusFilter').value = params.status;
        document.getElementById('sortByFilter').value = params.sortBy;
        document.getElementById('orderFilter').value = params.order;

        // Handle filter changes instantly
        function onFilterChange() {
            const par = {
                assigneeId: assSel.value,
                status: document.getElementById('statusFilter').value,
                sortBy: document.getElementById('sortByFilter').value,
                order: document.getElementById('orderFilter').value
            };
            // Remove blanks so URL is pretty
            Object.keys(par).forEach(k => { if (!par[k]) delete par[k]; });
            updateUrlParams(par);
            load(); // reload the table
        }
        assSel.onchange = onFilterChange;
        document.getElementById('statusFilter').onchange = onFilterChange;
        document.getElementById('sortByFilter').onchange = onFilterChange;
        document.getElementById('orderFilter').onchange = onFilterChange;

        // Reset button: clear all filters and reload
        document.getElementById('resetFilters').onclick = () => {
            updateUrlParams({});
            load();
        };

        // Fetch and show tasks
        const tasks = await fetchTasks(params);
        const tbody = document.querySelector('#tasks-table tbody');
        tbody.innerHTML = '';
        tasks.forEach(task => {
            const assignee = employees.find(a=>a.id===task.assigneeId);
            // Status dropdown if I am the assignee, else just text
            let statusCell, updateCell;
            if (user.id === task.assigneeId) {
                // Show dropdown to update status
                statusCell = task.status;
                updateCell = `
        <select data-taskid="${task.id}">
          <option value="PENDING" ${task.status === 'PENDING' ? 'selected' : ''}>Pending</option>
          <option value="IN_PROGRESS" ${task.status === 'IN_PROGRESS' ? 'selected' : ''}>In Progress</option>
          <option value="COMPLETED" ${task.status === 'COMPLETED' ? 'selected' : ''}>Completed</option>
        </select>
      `;
            } else {
                statusCell = task.status;
                updateCell = '';
            }
            tbody.innerHTML += `<tr>
      <td>${task.title}</td>
      <td>${task.description}</td>
      <td>${statusCell}</td>
      <td>${new Date(task.dueDate).toLocaleString()}</td>
      <td>${new Date(task.createdAt).toLocaleString()}</td>
      <td>${assignee ? assignee.name : ""}</td>
      <td>${updateCell}</td>
    </tr>`;
        });

        // Add status update handlers for assigned tasks
        tbody.querySelectorAll('select[data-taskid]').forEach(sel => {
            sel.onchange = async function() {
                const id = sel.getAttribute('data-taskid');
                const val = sel.value;
                await fetch('/api/tasks/' + id, {
                    method: 'PATCH',
                    headers: {
                        'Authorization': 'Bearer ' + localStorage.getItem('token'),
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: val })
                });
                load();
            };
        });
    }
    load();
</script>
</body>
</html>